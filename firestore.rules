rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin by querying their document
    function isAdmin() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userRole.hasAny(['admin', 'administrador']);
    }
    
    // Helper function to check if user is admin by email (for logs collection)
    function isAdminByEmail(email) {
      return request.auth != null && request.auth.token.email == email &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userRole.hasAny(['admin', 'administrador']);
    }
    
    // Logs collection rules
    match /logs/{userEmail} {
      // Allow users to write their own logs
      allow write: if request.auth != null && request.auth.token.email == userEmail;
      // Allow users to read their own logs, or admins to read any logs
      allow read: if request.auth != null && 
                     (request.auth.token.email == userEmail || isAdmin());
    }
    
    // Allow admin users to read all logs (wildcard rule)
    match /logs/{document=**} {
      allow read: if request.auth != null && isAdmin();
    }
    
    // Users collection rules
    match /users/{userId} {
      // Users can read/write their own document
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Admins can read any user document
      allow read: if request.auth != null && isAdmin();
      // Allow querying users collection for admin checks
      allow read: if request.auth != null;
    }
    
    // Default rules for other collections
    match /{document=**} {
      allow read, write: if request.auth != null;
    }
  }
}
